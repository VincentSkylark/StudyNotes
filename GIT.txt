GIT:
Command Line:
	$ git
	git [--version] [--exec-path[=GIT_EXEC_PATH]] [-p|--paginate|--no-pager] [--bare] [--git-dir=GIT_DIR] [--work-tree=GIT_WORK_TREE] COMMAND [ARGS]
	
	-add: add file contents to the index
	-bisect: find the change that introduced a bug by binary search
	-branch: list, create or delete branches
	-checkout: checkout and switch to a branch
	-clone: clone a repository into a new directory
	-commit: record changes to the repository
	-diff: show changes between commits, the comit and working trees
	-fetch: download objects and refs from another repository
	-grep: print lines matching a pattern
	-init: create an empty git repository or reinitialize an existing one
	-log: show comit logs
	-merge: join two or more development histories
	-mv: move or rename a file, a directory, or a symlink
	-pull: fetch from and merge with another repository or a local branch
	-push: update remote refs along with associated objects
	-rebase: forwad-port local commits to the updated upstream head
	-reset: reset current HEAD to the specified state
	-rm: remove files from the working tree and from the index
	-show: show various tyoes of objects
	-status: show the working tree status
	-tag: create, list, delete, or verify a tag object
	
	example:
	$git commit -m "Fixed a typo"
	
Sections:

1.Creating an Initial Repository:
	$mkdir ~/public_html
	$cd ~/public_html
	$echo 'some content' > index.html
	$git init
	
2.Adding Files to Your Repository;
	$git add index.html
	
3.Configuring the Commit Author
	$git config user.name "Jon Loeliger"
	$git config user.email "jdl@example.com"
	
4.Making Another Commit
	$git comit index.html

5.Viewing Your Commits
	$git log
	to see more detail about a particular commit, use git how with a commit number:
	$git show <commit number>
	
6.Viewing Commit Differences
	to see differences between two revisions, recall both full commit ID names and rung gir diff:
	$git diff <commit number 1> <commit number 2>
	
7.