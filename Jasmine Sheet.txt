1.Jasmine Matcher Table:
Any matcher can evaluate to a negative assertion by chaining
the call to expect with a not before calling the matcher.	
	.toBe(y); //compares with ===
	.not.toBe(y);
	.toEqual(y); //work for object comparation
	.toMatch(y); //compare regular expressions
	.toBeDefined(); //compare against 'undefined'
	.toBeUndefined();
	.toBeNull();
	.toBeTruthy(); //for boolean casting testing
	.toBeFalsy();
	.toCotain(); //finding an item in an Array
	.toBeLessThan(); 
	.toBeGreaterThan(); //mathematical comparisons 
	.toBeCloseTo(number,digits); //precision math comparation
	.toThrow(); //test if a function throws an exception
	.toThrowError(TypeError,"foo bar baz"); //test a specifica thrown exception

2.Manually failing a spec with fail:
	describe("A spec using the fail function", function() {
	  var foo = function(x, callBack) {
		if (x) {
		  callBack();
		}
	  };

	  it("should not call the callBack", function() {
		foo(false, function() {
		  fail("Callback has been called");
		});
	  });
	});

3.Pending Specs:
Pending specs do not run, but their names will show up in the results as pending.
Any spec declared with xit is marked as pending.
Any spec declared without a function body will also be marked pending in results.
	it("can be declared by calling 'pending' in the spec body", function() {
		expect(true).toBe(false);
		pending('this is why it is pending');
	  });
	});
	
4.Spy:
Jasmine has test double functions called spies. A spy can stub any function and tracks calls to it and all arguments. A spy only exists in the describe or it block in which it is defined, and will be removed after each spec.
	The "toHaveBeenCalled" matcher will return true if the spy was called.
	The "toHaveBeenCalledTimes" matcher will pass if the spy was called the specified number of times.
	The "toHaveBeenCalledWith" matcher will return true if the argument list matches any of the recorded calls to the spy.
	
	describe("A spy", function() {
	var foo, bar = null;

	beforeEach(function() {
    foo = {
      setBar: function(value) {
        bar = value;
      }
    };

    spyOn(foo, 'setBar');

    foo.setBar(123);
    foo.setBar(456, 'another param');
	});
	it("tracks that the spy was called", function() {
    expect(foo.setBar).toHaveBeenCalled();
	});
	it("tracks that the spy was called x times", function() {
    expect(foo.setBar).toHaveBeenCalledTimes(2);
  });
	it("tracks all the arguments of its calls", function() {
    expect(foo.setBar).toHaveBeenCalledWith(123);
    expect(foo.setBar).toHaveBeenCalledWith(456, 'another param');
  });
 
Other tracking Properties:
	Every call to a spy is tracked and exposed on the "calls" property.
	.calls.any(); //check if the spy has been called.
	.calls.count(); // returns the number of times the spy was called.
	.calls.argsFor(index); //returns the arguments passed to call number.
	.calls.allArgs(); // returns the arguments to all calls.
	.calls.all(); //returns the context and arguments passed all calls.
	.calls.mostRecent(); // returns the context and arguments for the most recent call
	.calls.first(); //returns the conetext "this" and arguments for the firsti call.
	.calls.reset(); // clears all tracking for a spy.
	
5.Matching Anything with jasmine.any;
	jasmine.any takes a constructor or "class" name as an expected value. It returns true if the constructor matches the constructor of the actual value.
	describe("jasmine.any", function() {
  it("matches any value", function() {
    expect({}).toEqual(jasmine.any(Object));
    expect(12).toEqual(jasmine.any(Number));
  });

  describe("when used with a spy", function() {
    it("is useful for comparing arguments", function() {
      var foo = jasmine.createSpy('foo');
      foo(12, function() {
        return true;
      });

      expect(foo).toHaveBeenCalledWith(jasmine.any(Number), jasmine.any(Function));
    });
  });
});
	jasmine.anything return true if the value is not null or undefined.
	describe("jasmine.anything", function() {
		it("matches anything", function() {
			expect(1).toEqual(jasmine.anything());
		});

	describe("when used with a spy", function() {
		it("is useful when the argument can be ignored", function() {
			var foo = jasmine.createSpy('foo');
			foo(12, function() {
			return false;
			});

		expect(foo).toHaveBeenCalledWith(12, jasmine.anything());
		});
		});
	});	
	
Partial Matching with jasmine.objectContainning
	jasmine.objectContaining is for thos times when an expectation only cares about certain key/value pairs in the actual.
Partial Array Matching with jasmine.arrayContaining

6.Jasmine Clock:
The Jasmine CLock is available for testing time dependent code.
It is installed with a call to jasmine.clock().install in a spec or suite that needs to manipulate time.
Be sure to uninstall the lock after you are done to restore the original functions.

7.ajax.js:
Testing ajax calls:
	plugin called jasmine-ajax allows ajax calls to be mocked out in texts. The "mock-ajax.js" need to be downloaded.
Basic Usage:

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	